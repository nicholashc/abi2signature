#!/usr/bin/env node

const Web3 = require("web3");
const web3 = new Web3();
const fs = require("fs");

for (let i = 0; i < process.argv.length; i++) {
  if (process.argv[i] == "--help" || process.argv[i] == "-h") {
    console.log(`
RUN
abi2signature [command] {path-to-abi.json|function}

COMMANDS
func2sig - takes the function and computes the signature
string2sig  - takes a string and computes the signatures

EXAMPLES
$ node ./bin/abi2signature < ./example/cryptokitties-abi.json
$ node ./bin/abi2signature func2sig "approve(address,uint256)"
$ node ./bin/abi2signature string2sig "[{...your abi...}]"
        `);
    process.exit();
  }
}

async function main() {

  let contractABI;

  switch (process.argv[2]) {

    case "func2sig":
      let func = process.argv[3];
      console.log(
        `${func} -> ${web3.eth.abi.encodeFunctionSignature(func)}`
      );
      break;

    case "string2sig":
      let input = process.argv[3]

      input = input.replace(/\s/g, ``);
      input = input.replace(/{/g, `{"`);
      input = input.replace(/:/g, `":"`);
      input = input.replace(/,/g, `","`);
      input = input.replace(/}/g, `"}`);
      input = input.replace(/\"\[/g, `[`);
      input = input.replace(/]"/g, `]`);

      contractABI = JSON.parse(input);

      for (let i = 0; i < contractABI.length; i++) {
        abiFunction = contractABI[i];

        if (abiFunction.name == undefined) {
          continue;
        }

        let inputs = [];

        for (let j = 0; j < abiFunction.inputs.length; j++) {
          inputs.push(abiFunction.inputs[j].type);
        }

        signature = web3.eth.abi.encodeFunctionSignature(abiFunction);

        console.log(
          `${signature} | ${abiFunction.type} | ${abiFunction.name}(${inputs})`
        );
      }
      break;

    default:
      contractABI = JSON.parse(await readStdin());

      for (let i = 0; i < contractABI.length; i++) {
        abiFunction = contractABI[i];

        if (abiFunction.name == undefined) {
          continue;
        }

        let inputs = [];

        for (let j = 0; j < abiFunction.inputs.length; j++) {
          inputs.push(abiFunction.inputs[j].type);
        }

        signature = web3.eth.abi.encodeFunctionSignature(abiFunction);

        console.log(
          `${signature} | ${abiFunction.type} | ${abiFunction.name}(${inputs})`
        );
      }
  }
}

async function readStdin() {
  process.stdin.setEncoding("utf8");

  let abi = "";

  process.stdin.on("readable", () => {
    const chunk = process.stdin.read();
    if (chunk != null) {
      abi = abi + chunk;
    }
  });

  return new Promise((resolve, reject) => {
    process.stdin.on("end", () => {
      resolve(abi);
    });
  });
}

main();
